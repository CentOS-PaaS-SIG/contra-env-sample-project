/**
 * Contra env-sample-project Pipeline with trigger
 *
 * This is a scripted pipeline for the contra-env-sample-project Pipeline
 *
 */

timestamps {
    env.ghprbGhRepository = env.ghprbGhRepository ?: 'CentOS-PaaS-SIG/contra-env-sample-project'
    env.ghprbActualCommit = env.ghprbActualCommit ?: 'master'
    env.ghprbPullAuthorLogin = env.ghprbPullAuthorLogin ?: ''
    env.ghprbPullId = env.ghprbPullId ?: ''

    env.AUTHOR_REPO_URL = env.ghprbAuthorRepoGitUrl ?: 'https://github.com/CentOS-PaaS-SIG/contra-env-sample-project.git'
    env.SOURCE_BRANCH = env.ghprbSourceBranch ?: 'master'
    env.PR_NUM = env.ghprbPullId ?: ''

    // Needed for deployOpenShiftTemplate()
    env.SLAVE_TAG = env.SLAVE_TAG ?: 'stable'
    env.SAMPLEPROJECTTEST_C7_TAG = env.SAMPLEPROJECTTEST_C7_TAG ?: 'stable'
    env.DOCKER_REPO_URL = env.DOCKER_REPO_URL ?: '172.30.254.79:5000'
    env.OPENSHIFT_NAMESPACE = env.OPENSHIFT_NAMESPACE ?: 'continuous-infra'
    env.OPENSHIFT_SERVICE_ACCOUNT = env.OPENSHIFT_SERVICE_ACCOUNT ?: 'jenkins'

    // Execution ID for this run of the pipeline
    executionID = UUID.randomUUID().toString()

    // List of containers to use in the pipeline
    containersWithProps = ['contra-env-sample-project-test-c7': [tag: env.SAMPLEPROJECTTEST_C7_TAG, command: '', privileged: true]]

    // Pod name to use
    podName = 'contra-env-sample-project-' + executionID

    // Get upstream libraries
    def libraries = ['cico-pipeline'           : ['master', 'https://github.com/CentOS/cico-pipeline-library.git'],
                     'contra-lib'              : ['master', 'https://github.com/openshift/contra-lib.git'],
                     'ci-pipeline'             : ['master', 'https://github.com/CentOS-PaaS-SIG/ci-pipeline.git']]

    libraries.each { name, repo ->
        library identifier: "${name}@${repo[0]}",
                retriever: modernSCM([$class: 'GitSCMSource',
                                      remote: repo[1]])
    }

    library identifier: "contra-env-sample-project@s${env.ghprbActualCommit}",
            retriever: modernSCM([$class: 'GitSCMSource',
                                  remote: "https://github.com/${env.ghprbGhRepository}.git",
                                  traits: [[$class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait'],
                                           [$class: 'RefSpecsSCMSourceTrait',
                                            templates: [[value: '+refs/heads/*:refs/remotes/@{remote}/*'],
                                                        [value: '+refs/pull/*:refs/remotes/origin/pr/*']]]]])


    // Set the pipeline properties
    properties(
            [
                    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '50', daysToKeepStr: '', numToKeepStr: '50')),
                    [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/CentOS-PaaS-SIG/contra-env-sample-project/'],
                    [$class: 'org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty', triggers:[
                            [
                                    $class: 'org.jenkinsci.plugins.ghprb.GhprbTrigger',
                                    orgslist: 'CentOS-PaaS-SIG',
                                    cron: 'H/5 * * * *',
                                    triggerPhrase: '.*\\[test\\].*',
                                    onlyTriggerPhrase: false,
                                    useGitHubHooks: true,
                                    permitAll: true,
                                    autoCloseFailedPullRequests: false,
                                    displayBuildErrorsOnDownstreamBuilds: true,
                                    extensions: [
                                            [
                                                    $class: 'org.jenkinsci.plugins.ghprb.extensions.status.GhprbSimpleStatus',
                                                    commitStatusContext: 'Contra Env Sample Project Testing Job',
                                                    showMatrixStatus: false,
                                                    triggeredStatus: 'Starting job...',
                                                    startedStatus: 'Testing...',
                                            ]
                                    ]
                            ]
                    ]],
                    parameters(
                            [
                                    string(name: 'PROJECT_REPO',
                                            defaultValue: 'contra-env-sample-project',
                                            description: 'Main project repo'),
                                    string(name: 'ghprbActualCommit',
                                            defaultValue: 'master',
                                            description: 'The GitHub pull request commit'),
                                    string(name: 'ghprbGhRepository',
                                            defaultValue: '',
                                            description: 'The repo the PR is against'),
                                    string(name: 'sha1',
                                            defaultValue: '',
                                            description: ''),
                                    string(name: 'ghprbPullId',
                                            defaultValue: '',
                                            description: 'Pull Request Number'),
                                    string(name: 'ghprbSourceBranch',
                                            defaultValue: 'master',
                                            description: 'Pull Request Source Branch'),
                                    string(name: 'ghprbAuthorRepoGitUrl',
                                            defaultValue: 'https://github.com/CentOS-PaaS-SIG/contra-env-sample-project.git',
                                            description: 'Pull Request Author repo url'),
                                    string(name: 'ghprbPullAuthorLogin',
                                            defaultValue: '',
                                            description: 'Pull Request Author username'),
                                    string(name: 'SLAVE_TAG',
                                            defaultValue: 'stable',
                                            description: 'Tag for slave image'),
                                    string(name: 'SAMPLEPROJECTTEST_C7_TAG',
                                            defaultValue: 'stable',
                                            description: 'Tag for contra-env-sample-project-test-c7 image'),
                                    string(name: 'DOCKER_REPO_URL',
                                            defaultValue: '172.30.254.79:5000',
                                            description: 'Docker repo url for Openshift instance'),
                                    string(name: 'OPENSHIFT_NAMESPACE',
                                            defaultValue: 'continuous-infra',
                                            description: 'Project namespace for Openshift operations'),
                                    string(name: 'OPENSHIFT_SERVICE_ACCOUNT',
                                            defaultValue: 'jenkins',
                                            description: 'Service Account for Openshift operations')
                            ]
                    ),
            ]
    )

    // Start the containers and the pipeline in OpenShift
    deployOpenShiftTemplate(containersWithProps: containersWithProps, podName: podName, docker_repo_url: env.DOCKER_REPO_URL) {
        def buildResult = null
        def currentStage = ""

        ciPipeline(buildPrefix: 'contra-env-sample-project-ci-pipeline', sendMetrics: false) {
            env.HOME = "/root"
            try {
                currentStage = "test-contra-env-sample-project"
                stage(currentStage) {
                    // Set stage specific vars
                    stageVars = [PROJECT_REPO: env.PROJECT_REPO, PR_NUM: env.PR_NUM, AUTHOR_REPO_URL: env.AUTHOR_REPO_URL, SOURCE_BRANCH: env.SOURCE_BRANCH]
                    // Run contra-env-sample-project test
                        executeInContainer(containerName: 'contra-env-sample-project-test-c7', containerScript: '/home/prepare_and_test.sh',
                                           stageVars: stageVars)
                }
            } catch (e) {
                // Set build result
                buildResult = 'FAILURE'
                currentBuild.result = buildResult

                // Report the exception
                echo "Error: Exception from " + currentStage + ":"
                echo e.getMessage()

                // Throw the error
                throw e

            } finally {
                // Set the current build result if not already set
                currentBuild.result = buildResult ?: 'SUCCESS'

                // Archive our artifacts
                samplePipelineUtils.getContainerLogsFromPod(OPENSHIFT_NAMESPACE, env.NODE_NAME)
                step([$class: 'ArtifactArchiver', allowEmptyArchive: true, artifacts: '*.xml,*.log,**/job.*,**/inventory.*', excludes: '**/*.example', fingerprint: true])

                // Archive JUnit results
                step([$class: 'JUnitResultArchiver', testResults: '*.xml'])

            }
        }
    }
}