def libraries = ['contra-lib': ['master', 'https://github.com/openshift/contra-lib.git']]

libraries.each { name, repo ->
    library identifier: "${name}@${repo[0]}",
            retriever: modernSCM([$class: 'GitSCMSource',
                                  remote: repo[1]])

}

properties(
        [
                buildDiscarder(logRotator(artifactDaysToKeepStr: '30', artifactNumToKeepStr: '', daysToKeepStr: '90', numToKeepStr: '')),
                disableConcurrentBuilds(),
                parameters(
                        [
                                string(defaultValue: "${env.ghprbActualCommit}", description: '', name: 'ghprbActualCommit'),
                                string(defaultValue: "${env.ghprbGhRepository}", description: '', name: 'ghprbGhRepository'),
                                string(defaultValue: '', description: '', name: 'ghprbPullId'),
                                string(defaultValue: '', description: '', name: 'ghprbPullAuthorLogin'),
                                string(defaultValue: "${env.OPENSHIFT_NAMESPACE}", description: 'Project namespace for Openshift operations', name: 'OPENSHIFT_NAMESPACE'),
                                string(defaultValue: "${env.DOCKER_REPO_URL}", description: 'The internal docker registry url', name: 'DOCKER_REPO_URL'),
                                string(defaultValue: 'stable', description: 'The rpmbuild image tag', name: 'RPMBUILD_TAG'),
                                string(defaultValue: 'stable', description: 'The cloud-image-compose image tag', name: 'CLOUD_IMAGE_COMPOSE_TAG'),
                                string(defaultValue: 'stable', description: 'The singlehost-test image tag', name: 'SINGLEHOST_TEST_TAG')


                        ]
                ),
        ]
)

containers = [
        'rpmbuild':
        [
                tag: env.RPMBUILD_TAG
        ],
        'cloud-image-compose':
        [
                tag: env.CLOUD_IMAGE_COMPOSE_TAG
        ],
        'singlehost-test':
        [
                tag: env.SINGLEHOST_TEST_TAG
        ]
]
podName = "contra-sample-pipeline-${UUID.randomUUID().toString()}"
env.DOCKER_REPO_URL = env.DOCKER_REPO_URL ?: '172.30.1.1:5000'
env.OPENSHIFT_NAMESPACE = env.OPENSHIFT_NAMESPACE ?: 'contra-sample-project'
prMessage = prMessage(env.CI_MESSAGE)

msgHeader = fedMsgHeader(repo: prMessage['repo'], namespace: 'contra-env-sample', username: prMessage['username'])
msgComplete = fedMsgComplete(header: msgHeader)
msgError = fedMsgError(header: msgHeader)

deployOpenShiftTemplate(podName: podName, containersWithProps: containers, docker_repo_url: DOCKER_REPO_URL,
                        openshift_namespace: OPENSHIFT_NAMESPACE) {

    ciPipeline(package_name: prMessage['repo'], buildPrefix: 'contra-env-sample', sendMetrics: false,
               completeMsg: msgComplete, errorMsg: msgError) {

        stage('rpm-build') {
            rpmBuildPR(repo: prMessage['repo'], id: prMessage['id'], uid: prMessage['uid'])
        }

        stage('repo-query') {
            repoQuery(repo: prMessage['repo'])
        }

        stage('image-compose') {
            imageCompose(package: prMessage['repo'], branch: prMessage['branch'], release: prMessage['release'])
        }

        stage('package-tests') {
            packageTests(package: prMessage['repo'], branch: prMessage['branch'])
        }

    }
}
